/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-10-15 02:45:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class memberEnrollForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write(' ');

	String contextPath = request.getContextPath();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html> \r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(contextPath );
      out.write("/views/member/css/memberEnrollForm.css\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/views/common/menubar.jsp", out, false);
      out.write(" \r\n");
      out.write("<br><br><br>\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("        <form action=\"");
      out.print(contextPath );
      out.write("/insert.me\" method=\"post\" id=\"join-member\">\r\n");
      out.write("            <h1>회원가입</h1>\r\n");
      out.write("            <p>아이디</p>\r\n");
      out.write("            <div>\r\n");
      out.write("	            <input type=\"text\" name=\"memId\" id=\"insertId\" required>\r\n");
      out.write("	            <button type=\"button\" onclick=\"idCheck()\" id=\"checkBtn\">중복확인</button>\r\n");
      out.write("	        </div>\r\n");
      out.write("            <p>비밀번호</p>\r\n");
      out.write("            <input type=\"password\" name=\"memPwd\" required> \r\n");
      out.write("            <p>비밀번호 재입력</p>\r\n");
      out.write("            <input type=\"password\" name=\"memPwdCheck\" required>\r\n");
      out.write("            <p>이름</p>\r\n");
      out.write("            <input type=\"text\" name=\"memName\" required>\r\n");
      out.write("            <p>전화번호</p>\r\n");
      out.write("            <input type=\"text\" name=\"phone\" required>\r\n");
      out.write("            <p>주소</p>\r\n");
      out.write("            <input type=\"text\" name=\"address\" required>\r\n");
      out.write("            <p>주민등록번호</p>\r\n");
      out.write("            <input type=\"text\" name=\"memNo\" required>\r\n");
      out.write("            <p>이메일</p>\r\n");
      out.write("            <div class=\"email\" required>\r\n");
      out.write("            <input type=\"hidden\" name=\"email\" >\r\n");
      out.write("            <input type=\"text\" id=\"emailId\">\r\n");
      out.write("            <select name=\"emailDomain\" id=\"emailDomain\">\r\n");
      out.write("                <option name=\"email\">@naver.com</option>\r\n");
      out.write("                <option name=\"email\">@gmail.com</option>\r\n");
      out.write("            </select>\r\n");
      out.write("        </div>\r\n");
      out.write("            <div class=\"button-container\">\r\n");
      out.write("                <input type=\"reset\" value=\"초기화\">\r\n");
      out.write("                <input type=\"submit\" value=\"계정생성\" onclick=\"return handleSubmit()\">\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("     ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/views/common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    	function insertEmail(){\r\n");
      out.write("    		$(\"#join-member input[name=email]\").val($(\"#emailId\").val() + $(\"#emailDomain\").val())\r\n");
      out.write("    	}\r\n");
      out.write("    	\r\n");
      out.write("    	function checkPwd() {\r\n");
      out.write("        const pwd = document.querySelector(\"#join-member input[name=memPwd]\").value;\r\n");
      out.write("        const pwdCheck = document.querySelector(\"#join-member input[name=memPwdCheck]\").value;\r\n");
      out.write("\r\n");
      out.write("        if (pwd !== pwdCheck) {\r\n");
      out.write("            alert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("        return true; // 비밀번호가 일치하면 true를 반환\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function handleSubmit() {\r\n");
      out.write("            // 이메일을 삽입\r\n");
      out.write("            insertEmail();\r\n");
      out.write("            // 비밀번호 확인\r\n");
      out.write("            return checkPwd(); // 비밀번호가 일치하면 true, 아니면 false\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function idCheck(){\r\n");
      out.write("        	console.log(\"함수 실행\")\r\n");
      out.write("           //중복확인버튼 클릭시 사용자가 입력한 아이디값을 서버에 보내서 조회요청 -> 응답받기\r\n");
      out.write("            //1) 사용불가 -> alert메세지출력(이미 존재하는 아이디입니다.)\r\n");
      out.write("            //2) 사용가능 -> 진짜사용할거니? ->  ok : 더이상아이디 수정못하게\r\n");
      out.write("            //                                 no : 다시 입력하도록 유도\r\n");
      out.write("\r\n");
      out.write("            const idInput = document.querySelector(\"input[name=memId]\");\r\n");
      out.write("            console.log(idInput)\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type : \"get\",\r\n");
      out.write("                url: \"");
      out.print(contextPath);
      out.write("/idCheck.me\",\r\n");
      out.write("                data : {\r\n");
      out.write("                    checkId : idInput.value\r\n");
      out.write("                }, \r\n");
      out.write("                success : function(result){\r\n");
      out.write("                    if(result === \"NNNNY\") {\r\n");
      out.write("                        if(confirm(\"사용가능한 아이디입니다. 정말 사용하시겠습니까? \")){\r\n");
      out.write("                            idInput.setAttribute(\"readonly\", true);\r\n");
      out.write("\r\n");
      out.write("                            const subminBtn = document.querySelector(\"input[type=submit]\");\r\n");
      out.write("                            subminBtn.removeAttribute(\"disabled\");\r\n");
      out.write("                        } else {\r\n");
      out.write("                            idInput.focus();\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"사용불가능한 아이디입니다.\");\r\n");
      out.write("                        idInput.focus();\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error : function(err){\r\n");
      out.write("                    console.log(\"실패 : \", err)\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
